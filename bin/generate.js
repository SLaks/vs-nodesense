"use strict";

// Get globals before require()ing any modules, in case they leak globals
var nodeGlobals = Object.getOwnPropertyNames(global);

var fs = require('fs');
var path = require('path');
var _ = require('lodash');
var mkdirp = require('mkdirp');
var rimraf = require('rimraf');

var ModuleEmitter = require('./ModuleEmitter');
var JSWriter = require('./JSWriter');

var projectDir = './';

// For debugging, it's much easier to be able to change the
// source files and have changes immediately reflect in the
// actual IntelliSense, without re-generating first.
var useLocalTemplates = __dirname.indexOf(path.resolve(projectDir)) === 0;
if (useLocalTemplates)
	console.log("Referencing template files directly from source; not copying to output directory.");

var outputDir = projectDir + 'node_modules/.vs-nodesense/';
rimraf.sync(outputDir);

var builtinsDir = outputDir + 'builtin-source/';
mkdirp.sync(builtinsDir);

fs.writeFile(outputDir + '.jshintignore', 'builtin-source/**');

var refGen = new ModuleEmitter(projectDir, outputDir);

function referenceTemplateFile(name) {
	var src = path.resolve(__dirname + '/../templates/' + name);

	if (useLocalTemplates)
		return indexJS.writeReference(src);

	var dest = outputDir + name;
	fs.createReadStream(src).pipe(fs.createWriteStream(dest));
	indexJS.writeReference(dest);
}

var indexJS = new JSWriter(outputDir + 'Node.js');
indexJS.writeline('/* global intellisense */');
indexJS.writeline('// This file is generated by vs-nodesense.');
indexJS.writeline('// Add this file to your Scripts/_references.js to enable IntelliSense.\r\n');
referenceTemplateFile('reset-globals.js');
referenceTemplateFile('module.js');
indexJS.writeReference(refGen.declarationsFile);
referenceTemplateFile('process.js');
referenceTemplateFile('utils.js');

var environmentFile = indexJS.createReferencedFile(outputDir + 'environment-data.js');
environmentFile.writeline('/* global intellisense */');
environmentFile.writeline('// This file is generated by vs-nodesense.');
environmentFile.writeAssignment('process.arch', process.arch);
environmentFile.writeAssignment('process.platform', process.platform);
environmentFile.writeAssignment('process.version', process.version);
environmentFile.writeAssignment('process.env', process.env);
environmentFile.writeAssignment('process.versions', process.versions);
environmentFile.writeAssignment('process.config', process.config);
environmentFile.writeline('intellisense.deleteExtraGlobals(' + JSON.stringify(nodeGlobals) + ');');
environmentFile.end();

indexJS.writeline('intellisense.closeModule();');

// TODO: Add node_modules aliases
_(process.binding('natives'))
	.pairs()
	.reject({ 0: 'module' })
	.forEach(function (p) {
		var name = p[0], source = p[1];
		var filePath = path.resolve(builtinsDir + name + '.js');

		// We don't need to wait for the file to be written
		fs.writeFile(filePath, source);
		refGen.emitFile(name, filePath);
	});

refGen.end();
indexJS.end();